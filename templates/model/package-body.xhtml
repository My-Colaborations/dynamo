<f:view xmlns:h="http://java.sun.com/jsf/html"
        xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:fn="http://java.sun.com/jsp/jstl/functions"
        xmlns:g="http://code.google.com/p/ada-ado/generator"
        xmlns:f="http://java.sun.com/jsf/core"
        file="#{model.package}.adb">-----------------------------------------------------------------------
--  #{model.name} -- #{model.name}
--  Copyright (C) 2009, 2010 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------

with Ada.Unchecked_Deallocation;
with ADO.Databases;

package body #{model.name} is
<h:list value="#{model.tables}" var="table">
   procedure Set_Field (Object : in out #{fn:capitalize(table.type)}'Class;
                        Impl   : out #{fn:capitalize(table.type)}_Access;
                        Field  : in Positive) is
   begin
      Object.Set_Field (Field);
      Impl := #{fn:capitalize(table.type)}_Impl (Object.Get_Object.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out #{fn:capitalize(table.type)}) is
      Impl : #{fn:capitalize(table.type)}_Access;
   begin
      Impl := new #{fn:capitalize(table.type)}_Impl;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: #{fn:capitalize(table.type)}
   -- ----------------------------------------
<h:list value="#{table.members}" var="column">
<h:panelGroup rendered="#{not column.isVersion}"><h:panelGroup rendered="#{column.type = 'String'}">
   procedure Set_#{fn:capitalize(column.name)} (Object : in out #{fn:capitalize(table.type)};
                   #{g:indent(column.name)} Value : in String) is
   begin
      Object.Set_#{fn:capitalize(column.name)} (To_Unbounded_String (Value));
   end Set_#{fn:capitalize(column.name)};
</h:panelGroup>
   procedure Set_#{fn:capitalize(column.name)} (Object : in out #{fn:capitalize(table.type)};
                   #{g:indent(column.name)} Value  : in #{g:adaType(column.type)}) is
      Impl : #{fn:capitalize(table.type)}_Access;
   begin
      Set_Field (Object, Impl, #{column.index + 1});
      Impl.#{fn:capitalize(column.name)} := Value;
   end Set_#{fn:capitalize(column.name)};
<h:panelGroup rendered="#{column.type = 'String'}">
   function Get_#{fn:capitalize(column.name)} (Object : in #{fn:capitalize(table.type)})
                 return String is
   begin
      return To_String (Object.Get_#{fn:capitalize(column.name)});
   end Get_#{fn:capitalize(column.name)};
</h:panelGroup>
   function Get_#{fn:capitalize(column.name)} (Object : in #{fn:capitalize(table.type)})
                  return #{g:adaType(column.type)} is
      Impl : constant #{fn:capitalize(table.type)}_Access := #{fn:capitalize(table.type)}_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.#{fn:capitalize(column.name)};
   end Get_#{fn:capitalize(column.name)};
</h:panelGroup></h:list>

   --  Copy of the object.
   function Copy (Object : #{fn:capitalize(table.type)}) return #{fn:capitalize(table.type)} is
      Result : #{fn:capitalize(table.type)};
   begin
      if not Object.Is_Null then
         declare
            Impl : constant #{fn:capitalize(table.type)}_Access
              := #{fn:capitalize(table.type)}_Impl (Object.Get_Object.all)'Access;
            Copy : constant #{fn:capitalize(table.type)}_Access
              := new #{fn:capitalize(table.type)}_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
<h:list value="#{table.members}" var="column">
<h:panelGroup rendered="#{not column.isPrimaryKey or (table.generator ne 'allocate')}">
            Copy.#{fn:capitalize(column.name)} := Impl.#{fn:capitalize(column.name)};
</h:panelGroup>
</h:list>
         end;
      end if;
      return Result;
   end Copy;

   procedure Find (Object  : in out #{fn:capitalize(table.type)};
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant #{fn:capitalize(table.type)}_Access := new #{fn:capitalize(table.type)}_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out #{fn:capitalize(table.type)};
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in #{g:adaType(table.id.type)}) is
      Impl  : constant #{fn:capitalize(table.type)}_Access := new #{fn:capitalize(table.type)}_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("#{table.id.name} = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Databases.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Save (Object  : in out #{fn:capitalize(table.type)};
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new #{fn:capitalize(table.type)}_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out #{fn:capitalize(table.type)};
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access #{fn:capitalize(table.type)}_Impl) is
      type #{fn:capitalize(table.type)}_Impl_Ptr is access all #{fn:capitalize(table.type)}_Impl;

      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (#{fn:capitalize(table.type)}_Impl, #{fn:capitalize(table.type)}_Impl_Ptr);

      Ptr : #{fn:capitalize(table.type)}_Impl_Ptr := #{fn:capitalize(table.type)}_Impl (Object.all)'Access;
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out #{fn:capitalize(table.type)}_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (#{fn:toUpperCase(table.type)}_TABLE'Access);
   begin
      Stmt.Set_Parameters (Query);
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   procedure Save (Object  : in out #{fn:capitalize(table.type)}_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement := Session.Create_Statement (#{fn:toUpperCase(table.type)}_TABLE'Access);
   begin
<h:list value="#{table.members}" var="column">
<h:panelGroup rendered="#{not column.isVersion}">
      if Object.Is_Modified (#{column.index + 1}) then
         Stmt.Save_Field (Name  => "#{column.sqlName}",
                          Value => Object.#{fn:capitalize(column.name)});
         Object.Clear_Modified (#{column.index + 1});
      end if;
</h:panelGroup>
</h:list>
      if Stmt.Has_Save_Fields then
<h:panelGroup rendered="#{not empty table.version}">
         Object.#{fn:capitalize(table.version.name)} := Object.#{fn:capitalize(table.version.name)} + 1;
         Stmt.Save_Field (Name  => "#{table.version.name}",
                          Value => Object.#{fn:capitalize(table.version.name)});
         Stmt.Set_Filter (Filter => "#{table.id.name} = ? and #{table.version.name} = ?");
         Stmt.Add_Param (Value => Object.#{fn:capitalize(table.id.name)});
         Stmt.Add_Param (Value => Object.#{fn:capitalize(table.version.name)} - 1);
</h:panelGroup>
<h:panelGroup rendered="#{empty table.version}">
         Stmt.Set_Filter (Filter => "#{table.id.name} = ?");
         Stmt.Add_Param (Value => Object.#{fn:capitalize(table.id.name)});
</h:panelGroup>
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result = 0 then
                  raise LAZY_LOCK;
               else
                  raise UPDATE_ERROR;
               end if;
            end if; 
         end;
      end if;
   end Save;

   procedure Create (Object  : in out #{fn:capitalize(table.type)}_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (#{fn:toUpperCase(table.type)}_TABLE'Access);
<h:panelGroup rendered="#{table.generator ne 'auto'}">
      Result : Integer;</h:panelGroup>
   begin<h:list value="#{table.members}" var="column">
<h:panelGroup rendered="#{table.generator eq 'allocate' and table.id.name eq column.name}">
      Session.Allocate (Name => "#{table.name}", Id => Object.#{fn:capitalize(column.name)});</h:panelGroup>
<h:panelGroup rendered="#{table.generator ne 'auto' or table.id.name ne column.name}">
      Query.Save_Field (Name => "#{column.name}", Value => Object.#{fn:capitalize(column.name)});</h:panelGroup>
</h:list>
<h:panelGroup rendered="#{not empty table.version}">
      Object.#{fn:capitalize(table.version.name)} := 1;
      Query.Save_Field (Name => "#{table.version.name}", Value => Object.#{fn:capitalize(table.version.name)});
</h:panelGroup>
<h:panelGroup rendered="#{table.generator ne 'auto'}">
      Query.Execute (Result);
      if Result /= 1 then
         raise INSERT_ERROR;
      end if;
</h:panelGroup>
<h:panelGroup rendered="#{table.generator eq 'auto'}">
      Query.Execute (Object.#{fn:capitalize(table.id.name)});
</h:panelGroup>
      Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out #{fn:capitalize(table.type)}_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement := Session.Create_Statement (#{fn:toUpperCase(table.type)}_TABLE'Access);
   begin
      Stmt.Set_Filter (Filter => "#{table.id.name} = ?");
      Stmt.Add_Param (Value => Object.#{fn:capitalize(table.id.name)});
      Stmt.Execute;
   end Delete;

   function Get_Value (Item : in #{fn:capitalize(table.type)};
                       Name : in String) return EL.Objects.Object is
      Impl : constant access #{fn:capitalize(table.type)}_Impl := #{fn:capitalize(table.type)}_Impl (Item.Get_Object.all)'Access;
   begin
<h:list value="#{table.members}" var="column">
<h:panelGroup rendered="#{not column.isVersion}">
      if Name = "#{column.name}" then
<h:panelGroup rendered="#{g:isInteger(column.type) or column.type eq 'ADO.Identifier'}">
         return EL.Objects.To_Object (Long_Long_Integer (Impl.#{fn:capitalize(column.name)}));
</h:panelGroup>
<h:panelGroup rendered="#{not g:isInteger(column.type) and column.type ne 'ADO.Identifier'}">
         return EL.Objects.To_Object (Impl.#{fn:capitalize(column.name)});
</h:panelGroup>
      end if;
</h:panelGroup></h:list>
      raise ADO.Databases.NOT_FOUND;
   end Get_Value;

   procedure List (Object  : in out #{fn:capitalize(table.type)}_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement := Session.Create_Statement (#{fn:toUpperCase(table.type)}_TABLE'Access);
   begin
      Stmt.Set_Parameters (Query);
      Stmt.Execute;
      #{fn:capitalize(table.type)}_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : #{fn:capitalize(table.type)};
            Impl : constant #{fn:capitalize(table.type)}_Access := new #{fn:capitalize(table.type)}_Impl;
         begin
            Impl.Load (Stmt);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object : in out #{fn:capitalize(table.type)}_Impl;
                   Stmt   : in out ADO.Statements.Query_Statement'Class) is
   begin
<h:list value="#{table.members}" var="column">
<h:panelGroup rendered="#{column.type eq 'ADO.Identifier'}">
      Object.#{fn:capitalize(column.name)} := Stmt.Get_Identifier (#{column.index});
</h:panelGroup>
<h:panelGroup rendered="#{column.type ne 'ADO.Identifier'}">
      Object.#{fn:capitalize(column.name)} := Stmt.Get_#{fn:capitalize(g:adaType(column.type))} (#{column.index});
</h:panelGroup></h:list>
<h:panelGroup rendered="#{not empty table.version}">
      Object.#{fn:capitalize(table.version.name)} := Stmt.Get_#{fn:capitalize(g:adaType(table.version.type))} (#{table.version.index});
</h:panelGroup>
      Set_Created (Object);
   end Load;
</h:list>
end #{model.name};
</f:view>